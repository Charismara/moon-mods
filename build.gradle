buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }

    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

allprojects {
    group = "de.blutmondgilde"
    /*
MAJORMOD
    Removing items, blocks, tile entities, etc.
    Changing or removing previously existing mechanics.
    Updating to a new Minecraft version.
MAJORAPI
    Changing the order or variables of enums.
    Changing return types of methods.
    Removing public methods altogether.
MINOR
    Adding items, blocks, tile entities, etc.
    Adding new mechanics.
    Deprecating public methods. (This is not a MAJORAPI increment since it doesnâ€™t break an API.)
PATCH
    Bugfixes.
 */
    version = "0.0.1.0"

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
}

subprojects {
    apply plugin: 'net.minecraftforge.gradle'
    apply plugin: 'org.spongepowered.mixin'
    apply plugin: 'org.parchmentmc.librarian.forgegradle'

    java {
        toolchain.languageVersion = JavaLanguageVersion.of(16)
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        minecraft 'net.minecraftforge:forge:1.17.1-37.1.0'

        annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'

        implementation group: 'org.jetbrains', name: 'annotations', version: '22.0.0'

        compileOnly 'org.projectlombok:lombok:1.18.22'
        annotationProcessor 'org.projectlombok:lombok:1.18.22'
    }

    minecraft{
        mappings channel: 'parchment', version: '2021.10.31-1.17.1'
    }

    sourceSets.main.resources { srcDir 'src/generated/resources' }

    def replaceResources = tasks.register("replaceResources", Copy) {
        it.outputs.upToDateWhen { false }
        //Copy it into the build dir
        it.from(sourceSets.main.resources) {
            include "META-INF/mods.toml"
            expand 'modVersion': "${project.version}"
        }
        it.into "$buildDir/resources/main/"
    }

    processResources {
        duplicatesStrategy(DuplicatesStrategy.FAIL)
        exclude('META-INF/mods.toml')
        configure { finalizedBy(replaceResources) }
    }

    classes.configure {
        dependsOn(replaceResources)
    }

    assemble.dependsOn('reobfJar')
}